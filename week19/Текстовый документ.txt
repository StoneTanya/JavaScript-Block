Вопрос 2.
примеры объектно-ориентированного подхода в реальной жизни:

Таксопарк: классы Машины (марки, модели, пробег, класс, цвета и пр.), Водители (ФИО, стаж, данные водительсткого удостоверения), Пассажиры (ФИО, контакты, история поездок).

Примеры объектно-ориентированного подхода в программировании:

Список работников на портале организации (ФИО, наименование отдела, должность, стаж, контактные данные, адрес офиса).

Вопрос 4.


Конструктор — это специальный метод,
который вызывается при создании объекта с использованием class.

Когда мы создаём объект с помощью new, создаётся новый объект (экземпляр класса), в этот момент вызывается constructor. 
Конструктор может принимать аргументы и потом как-то их использовать. В нашем случае мы используем аргумент, чтобы узнать, какое количество денег будет потрачено.

Конструктор — это функция, которую мы используем, чтобы создавать однотипные объекты. Такие функции похожи на печатный станок, который создаёт детали LEGO. Однотипные объекты — детальки, а конструктор — станок. Он как бы конструирует эти объекты, отсюда название.

По соглашениям конструкторы вызывают с помощью ключевого слова new, а также называют с большой буквы, причём обычно не глаголом, а существительным. Существительное — это та сущность, которую создаёт конструктор.
Ещё раз заметим: технически любая функция может быть использована как конструктор. То есть, каждая функция может быть вызвана при помощи оператора new.

Вопрос 6.
Самостоятельно изучите, что такое геттеры и сеттеры, приведите пример класса с их использованием.

 геттер - функция чтения свойства 
сеттер - функция записи свойства. Точнее: 
get — функция, используемая для получения значения свойства, возвращает значение или undefined.

set — функция, используемая для установки значения свойства. Принимает единственным аргументом новое значение, присваиваемое свойству. 

Дескриптор доступа
для объявления геттеров и сеттеров придумали синтаксис без вызова Object.defineProperty():

const animal = {
  get name() {
    return this._name
  },
  set name(value) {
    this._name = value
  }
}

console.log(animal.name)
// undefined

animal.name = 'Кот'
console.log(animal.name)
// Кот

Скопировать
Сеттеры могут понадобиться, например, для модификации значения при записи свойств. В примере ниже мы модифицируем дату и записываем в нужном формате.

const updatedAt = {
  get date() {
    return this._date
  },

  set date(value) {
    this._date = new Intl.DateTimeFormat('en-US').format(value)
  }
}

Скопировать
Запишем дату и время в поле date:

updatedAt.date = new Date(2030, 11, 12)
console.log(updatedAt.date)
// 12/12/2030

Скопировать
И получим дату в нужном формате: 12/12/2030.

Свойства с методами доступа дают нам все возможности обработки данных с помощью функций и простоту, характерную для работы с обычными свойствами.